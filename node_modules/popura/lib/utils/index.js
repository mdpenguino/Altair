'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cleanApiData = require('./clean-api-data');

Object.defineProperty(exports, 'cleanApiData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cleanApiData).default;
  }
});

var _cleanListData = require('./clean-list-data');

Object.defineProperty(exports, 'cleanListData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cleanListData).default;
  }
});

var _convertFieldTypes = require('./convert-field-types');

Object.defineProperty(exports, 'convertFieldTypes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_convertFieldTypes).default;
  }
});

var _generateAuthToken = require('./generate-auth-token');

Object.defineProperty(exports, 'generateAuthToken', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_generateAuthToken).default;
  }
});

var _request = require('./request');

Object.defineProperty(exports, 'request', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_request).default;
  }
});

var _xmlParser = require('./xml-parser');

Object.defineProperty(exports, 'xmlParser', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xmlParser).default;
  }
});

var _xmlBuilder = require('./xml-builder');

Object.defineProperty(exports, 'xmlBuilder', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xmlBuilder).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a string, returns a function that checks if it's
 * inside another strings
 *
 * @param {string} needle
 * @return {function}
 */
var includesText = exports.includesText = function includesText(needle) {
  return function (haystack) {
    return haystack.includes(needle);
  };
};

/**
 * Given a number, return itself with at least 2 digits.
 *
 * @param {number} n
 * @return {string}
 */
var showTwoDigit = exports.showTwoDigit = function showTwoDigit(n) {
  return n < 10 ? '0' + n : n;
};

/**
 * Given a `splitter` character, split a `str` and trim it's values.
 *
 * @param {string} splitter
 * @param {string} str
 * @return {array}
 */
var splitBy = exports.splitBy = function splitBy(splitter, str) {
  return str ? str.split(splitter).map(function (value) {
    return value.trim();
  }) : [];
};